<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Scheduler</name>
    </assembly>
    <members>
        <member name="M:Scheduler.Controllers.SchedulerController.Test">
            <summary>
            test comments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Scheduler.MediatR.Command.AddNewJobHandler.Handle(Scheduler.MediatR.Command.AddNewJob,System.Threading.CancellationToken)">
            <summary>
            Add new job if not exist or update previous one
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Scheduler.MediatR.Command.SendCommandHandler.Handle(Scheduler.MediatR.Command.SendCommand,System.Threading.CancellationToken)">
            <summary>
            Send command by mediator
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Scheduler.Models.JobOption">
            <summary>
            Describe fields from the job during reading data from configuration file
            </summary>
        </member>
        <member name="P:Scheduler.Models.JobOption.UniqueName">
            <summary>
            Unique name of job
            </summary>
        </member>
        <member name="P:Scheduler.Models.JobOption.IsEnabled">
            <summary>
            Condition Is enabled for reading
            </summary>
        </member>
        <member name="P:Scheduler.Models.JobOption.CronSchedule">
            <summary>
            Cron schedule expressions (min, hours, day, month, day of week)
            </summary>
        </member>
        <member name="P:Scheduler.Models.JobOption.Action">
            <summary>
            Name of the action method (class)
            </summary>
        </member>
        <member name="P:Scheduler.Models.JobOption.Options">
            <summary>
            Additional parameters like EndPointUrl 
            </summary>
        </member>
        <member name="T:Scheduler.Models.JobServiceOptions">
            <summary>
            Represent the list of all jobs
            </summary>
        </member>
        <member name="M:Scheduler.Program.CreateHostBuilder(System.String[])">
            <summary>
            Allow to read parameters appsettings.json and the parameters were
            overwritten with parameters that are passed to the docker compose file
            </summary>
        </member>
        <member name="T:Scheduler.Services.RabbitCommandHandlerService">
            <summary>
            Service for handle queues -get commands for adding a new job
            </summary>
        </member>
        <member name="M:Scheduler.Services.RabbitCommandHandlerService.OnReceived(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Get the message to scheduler command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Scheduler.Services.RabbitCommandHandlerService.InitializeRabbitMQListener">
            <summary>
            Through one queue, the Scheduler will receive a message that some connectors have appeared and he needs to add a job 
            </summary>
        </member>
        <member name="M:Scheduler.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            DI for startup
            </summary>
        </member>
    </members>
</doc>
